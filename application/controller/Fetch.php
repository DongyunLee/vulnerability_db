<?php
/**
 * Fetch.php - VulnerabilityDatabase
 * By lidongyun@shuwang-tech.com
 * On 2019/5/16 13:03
 * Doing good deeds without asking for reward
 */

namespace app\controller;

use app\model\Bugtraq;
use app\model\Cves;
use app\model\Files;
use app\model\Log;
use app\model\Products;
use app\model\Vulnerabilitys;
use think\Controller;
use think\Exception;
use think\facade\Url;
use think\Request;

/**
 * 自动抓取控制器
 * Class Fetch
 * @property mixed id
 * @package app\index\controller
 */
class Fetch extends Controller
{
	/**
	 * 显示上传xml的页面
	 * @return mixed
	 */
	public function index ()
	{
		$this->assign('action', Url::build('syn'));
		
		return $this->fetch('/fetch');
	}
	
	/**
	 * 进行同步的逻辑
	 * @param \think\Request $request
	 * @throws \Exception
	 */
	public function syn (Request $request)
	{
		// 接收xml
		$xml = $request->file('xml');
		
		// 准备记录数据
		$log_data = [
			'file_name' => $xml->getInfo('name')
		];
		
		try {
			// 如果已存在则不插入
			$isset = Files::where([ 'title' => $log_data['file_name'] ])
			              ->count();
			if ( $isset <= 0 ) {
				$add_file_result = (new Files([
					                              'title' => $log_data['file_name']
				                              ]))->save();
				if ( !$add_file_result ) throw new Exception('文件表插入失败，文件名为' . $log_data['file_name'], 90001);
				$files_id = $add_file_result['id'];
			} else {
				$files = Files::where([ 'title' => $log_data['file_name'] ])
				              ->find();
				$files_id = $files['id'];
			}
			
			// 解析xml
			$data = self::parseXML(file_get_contents($xml->getPathname()));
			
			foreach ( $data as $datum ) {
				$datum['files_id'] = $files_id;
				
				// 解析bid
				if ( isset($datum['bids']) ) {
					$bids = $datum['bids'];
					unset($datum['bids']);
					if ( is_array($bids) && count($bids) > 0 ) {
						
						$bid_id_list = [];
						foreach ( $bids as $bid ) {
							if ( !isset($bid['bidNumber']) || empty($bid['bidNumber']) ) continue;
							$bid_datum = [
								'bid_number' => $bid['bidNumber']
							];
							if ( isset($bid['bidUrl']) && !empty($bid['bidUrl']) ) $bid_datum['bid_url'] = $bid['bidUrl'];
							// 如果已存在则不插入
							$isset = Cves::where([ 'bid_number' => $bid_datum['bid_number'] ])
							             ->count();
							if ( $isset > 0 ) continue;
							
							// 插入bid
							$result = Bugtraq::create($bid_datum);
							if ( $result->isEmpty() ) throw new Exception('插入bid失败，信息为' . json_encode($bid_datum),
							                                              90002);
							$bid_id_list[] = $result['id'];
						}
					}
				}
				
				// 解析cve
				if ( isset($datum['cves']) ) {
					$cves = $datum['cves'];
					unset($datum['cves']);
					if ( is_array($cves) && count($cves) <= 0 ) {
						
						$cve_id_list = [];
						foreach ( $cves as $cve ) {
							if ( !isset($cve['cveNumber']) || empty($cve['cveNumber']) ) continue;
							$cve_datum = [
								'cve_number' => $cve['cveNumber']
							];
							if ( isset($cve['cveUrl']) && !empty($cve['cveUrl']) ) $cve_datum['cve_url'] = $cve['cveUrl'];
							// 如果已存在则不插入
							$isset = Cves::where([ 'cve_number' => $cve_datum['cve_number'] ])
							             ->count();
							if ( $isset > 0 ) continue;
							
							// 插入cve
							$result = Cves::create($cve_datum);
							if ( $result->isEmpty() ) throw new Exception('插入cve失败，信息为' . json_encode($cve_datum),
							                                              90002);
							$cve_id_list[] = $result['id'];
						}
					}
				}
				
				// 解析受影响的产品
				if ( isset($datum['products']) ) {
					
					$products = $datum['products'];
					unset($datum['products']);
					if ( is_array($products) && count($products) > 0 ) {
						$products_id_list = [];
						foreach ( $products as $product ) {
							if ( !isset($product) || empty($product) ) continue;
							
							// 如果已存在则不插入
							$isset = Products::where([ 'name' => $product ])
							                 ->count();
							if ( $isset > 0 ) continue;
							
							// 插入cve
							$result = Cves::create([ 'name' => $product ]);
							if ( $result->isEmpty() ) {
								throw new Exception('插入product失败，信息为' . json_encode([ 'name' => $product ]), 90002);
							}
							$products_id_list[] = $result['id'];
						}
					}
				}
				// 如果已存在则不插入
				$isset = Vulnerabilitys::where($datum)
				                       ->count();
				if ( $isset > 0 ) {
					$v_id = Vulnerabilitys::where($datum)
					                      ->find()['id'];
				} else {
					
					// 记录漏洞
					$v_insert_result = Vulnerabilitys::create($datum);
					if ( $v_insert_result->isEmpty() ) throw new Exception('漏洞插入失败，数据为' . json_encode($datum), 90003);
					
					$v_id = $v_insert_result['id'];
				}
				
				
				// TODO v_id
				
			}
			
			$log_data['status'] = 1;
			Log::create($log_data);
			\think\facade\Log::info('导入成功！');
			exit('<script>alert("添加成功!");history.go(-1)</script>');
		} catch ( Exception $exception ) {
			$log_data['status'] = 0;
			Log::create($log_data);
			$code = $exception->getCode() == 0
				? 99999
				: $exception->getCode();
			$log = "[{$code}]导入失败。{$exception->getMessage()}";
			\think\facade\Log::error($log);
			exit("<script>alert('{$log}');history.go(-1);</script>");
		}
	}
	
	/**
	 * parseXML
	 * @param string $xml
	 * @return mixed
	 */
	private static function parseXML (string $xml)
	{
		$simple_xml_object = simplexml_load_string($xml);
		$xml_array = [];
		
		foreach ( $simple_xml_object->children() as $name => $value ) {
			$value = json_decode(json_encode($value), true);
			$xml_array[] = [
				'cnvd_id'         => $value['number'],
				'title'           => $value['title'],
				'serverity'       => $value['serverity'],
				'is_event'        => $value['isEvent'],
				'submit_time'     => strtotime($value['submitTime']),
				'open_time'       => strtotime($value['openTime']),
				'discoverer_name' => $value['discovererName'],
				'formal_way'      => $value['formalWay'],
				'description'     => $value['description'],
				'bids'            => isset($value['bids']['bid']) && !empty($value['bids']['bid'])
					? $value['bids']['bid']
					: [],
				'cves'            => isset($value['cves']['cve']) && !empty($value['cves']['cve'])
					? $value['cves']['cve']
					: [],
				'products'        => isset($value['products']['product']) && !empty($value['products']['product'])
					? $value['products']['product']
					: []
			];
		}
		
		return $xml_array;
	}
}